/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kurapayload.proto */

#ifndef PROTOBUF_C_kurapayload_2eproto__INCLUDED
#define PROTOBUF_C_kurapayload_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Kuradatatypes__KuraPayload Kuradatatypes__KuraPayload;
typedef struct _Kuradatatypes__KuraPayload__KuraMetric Kuradatatypes__KuraPayload__KuraMetric;
typedef struct _Kuradatatypes__KuraPayload__KuraPosition Kuradatatypes__KuraPayload__KuraPosition;


/* --- enums --- */

typedef enum _Kuradatatypes__KuraPayload__KuraMetric__ValueType {
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__DOUBLE = 0,
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__FLOAT = 1,
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__INT64 = 2,
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__INT32 = 3,
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__BOOL = 4,
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__STRING = 5,
  KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE__BYTES = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__VALUE_TYPE)
} Kuradatatypes__KuraPayload__KuraMetric__ValueType;

/* --- messages --- */

struct  _Kuradatatypes__KuraPayload__KuraMetric
{
  ProtobufCMessage base;
  char *name;
  Kuradatatypes__KuraPayload__KuraMetric__ValueType type;
  protobuf_c_boolean has_double_value;
  double double_value;
  protobuf_c_boolean has_float_value;
  float float_value;
  protobuf_c_boolean has_long_value;
  int64_t long_value;
  protobuf_c_boolean has_int_value;
  int32_t int_value;
  protobuf_c_boolean has_bool_value;
  protobuf_c_boolean bool_value;
  char *string_value;
  protobuf_c_boolean has_bytes_value;
  ProtobufCBinaryData bytes_value;
};
#define KURADATATYPES__KURA_PAYLOAD__KURA_METRIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kuradatatypes__kura_payload__kura_metric__descriptor) \
    , NULL, 0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,{0,NULL} }


struct  _Kuradatatypes__KuraPayload__KuraPosition
{
  ProtobufCMessage base;
  double latitude;
  double longitude;
  protobuf_c_boolean has_altitude;
  double altitude;
  /*
   * dilution of precision of the current satellite fix. 
   */
  protobuf_c_boolean has_precision;
  double precision;
  /*
   * heading in degrees
   */
  protobuf_c_boolean has_heading;
  double heading;
  /*
   * meters per second
   */
  protobuf_c_boolean has_speed;
  double speed;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  /*
   * number satellites locked by the GPS device
   */
  protobuf_c_boolean has_satellites;
  int32_t satellites;
  /*
   * status indicator for the GPS data: 1 = no GPS response; 2 = error in response; 4 = valid.
   */
  protobuf_c_boolean has_status;
  int32_t status;
};
#define KURADATATYPES__KURA_PAYLOAD__KURA_POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kuradatatypes__kura_payload__kura_position__descriptor) \
    , 0, 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Kuradatatypes__KuraPayload
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timestamp;
  int64_t timestamp;
  Kuradatatypes__KuraPayload__KuraPosition *position;
  /*
   * can be zero, so optional
   */
  size_t n_metric;
  Kuradatatypes__KuraPayload__KuraMetric **metric;
  protobuf_c_boolean has_body;
  ProtobufCBinaryData body;
};
#define KURADATATYPES__KURA_PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kuradatatypes__kura_payload__descriptor) \
    , 0,0, NULL, 0,NULL, 0,{0,NULL} }


/* Kuradatatypes__KuraPayload__KuraMetric methods */
void   kuradatatypes__kura_payload__kura_metric__init
                     (Kuradatatypes__KuraPayload__KuraMetric         *message);
/* Kuradatatypes__KuraPayload__KuraPosition methods */
void   kuradatatypes__kura_payload__kura_position__init
                     (Kuradatatypes__KuraPayload__KuraPosition         *message);
/* Kuradatatypes__KuraPayload methods */
void   kuradatatypes__kura_payload__init
                     (Kuradatatypes__KuraPayload         *message);
size_t kuradatatypes__kura_payload__get_packed_size
                     (const Kuradatatypes__KuraPayload   *message);
size_t kuradatatypes__kura_payload__pack
                     (const Kuradatatypes__KuraPayload   *message,
                      uint8_t             *out);
size_t kuradatatypes__kura_payload__pack_to_buffer
                     (const Kuradatatypes__KuraPayload   *message,
                      ProtobufCBuffer     *buffer);
Kuradatatypes__KuraPayload *
       kuradatatypes__kura_payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kuradatatypes__kura_payload__free_unpacked
                     (Kuradatatypes__KuraPayload *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Kuradatatypes__KuraPayload__KuraMetric_Closure)
                 (const Kuradatatypes__KuraPayload__KuraMetric *message,
                  void *closure_data);
typedef void (*Kuradatatypes__KuraPayload__KuraPosition_Closure)
                 (const Kuradatatypes__KuraPayload__KuraPosition *message,
                  void *closure_data);
typedef void (*Kuradatatypes__KuraPayload_Closure)
                 (const Kuradatatypes__KuraPayload *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kuradatatypes__kura_payload__descriptor;
extern const ProtobufCMessageDescriptor kuradatatypes__kura_payload__kura_metric__descriptor;
extern const ProtobufCEnumDescriptor    kuradatatypes__kura_payload__kura_metric__value_type__descriptor;
extern const ProtobufCMessageDescriptor kuradatatypes__kura_payload__kura_position__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kurapayload_2eproto__INCLUDED */
