syntax = "proto2";

//
// To compile:
// cd client_libraries/java
// protoc --proto_path=../../ --java_out=src/main/java ../../sparkplug_b/sparkplug_b.proto
//
package com.cirruslink.sparkplug.protobuf;

option java_package         = "com.cirruslink.sparkplug.protobuf.message";
option java_outer_classname = "SparkplugBProto";

message Payload {

	message Metric {

		enum DataType {
			// Unknown placeholder for future expansion.
			Unknown		= 0;

			// Ignition Data Types
			Int1		= 1;
			Int2		= 2;
			Int4		= 3;
			Int8		= 4;
			Float4		= 5;
			Float8		= 6;
			Boolean		= 7;
			String		= 8;
			DateTime	= 9;
			Dataset		= 10;
			Text		= 11;

			// Additional Data Types
			Bytes		= 12;
			File		= 13;
			UdtDef		= 14;
			UdtInst		= 15;
		}

		message MetaData {
			// Bytes specific metadata
			optional bool isMultiPart		= 1;
			optional bool isScript			= 2;

			// General metadata
			optional string units			= 3;		// Engineering units
			optional string content_type	= 4;		// Content/Media type
			optional uint64 size			= 5;		// File size, String size, Multi-part size, etc
			optional string algorithm		= 6;		// Algorithm for encoding, encryption, hashing, or obfuscation
			optional string format			= 7;		// Date/Time Format or something else
			optional uint64 seq				= 8;		// Sequence number for multi-part messages

			// File metadata
			optional string file_name		= 9;		// File name
			optional string file_type		= 10;		// File type (i.e. xml, json, txt, cpp, etc)
			optional string md5				= 11;		// md5 of data

			// Indicates a request to remove a tag - do we want to support this?
			optional bool remove			= 12;

			// UDT specifics
			optional string typeId			= 13;		// For UDT types - suchs as 'OPC' or 'Motor'

			// Catchalls and future expansion
			optional string description		= 14;		// Could be anything such as json or xml of custom properties
			extensions						15 to max;	// For third party extensions
		}

		message DataSet {
			message Value {
				enum DataType {
					Unknown			= 0;
					Int1			= 1;
					Int2			= 2;
					Int4			= 3;
					Int8			= 4;
					Float4			= 5;
					Float8			= 6;
					Boolean			= 7;
					String			= 8;
					DateTime		= 9;
					Text			= 10;
					Null			= 11;
				}

				optional DataType type			= 1;
				optional uint32 int_value		= 2;		// Int1, Int2, Int4
				optional uint64 long_value		= 3;		// Int8, DateTime
				optional float  float_value		= 4;		// Float4
				optional double double_value	= 5;		// Float8
				optional bool   boolean_value	= 6;		// Boolean 
				optional string string_value	= 7;		// String, Text
				extensions                      8 to max;	// For third party extensions
			}

			message Row {
				repeated Value element			= 1;
				extensions                      2 to max;	// For third party extensions
			}

			optional uint64 num_of_columns		= 1;
			repeated Value columns				= 2;
			repeated Row rows					= 3;
			extensions      	                4 to max;	// For third party extensions

		}

		optional string   name			= 1;		// Metric name - should only be included on birth
		optional uint64   alias			= 2;		// Metric alias - tied to name on birth and included in all later DATA messages
		optional uint64   timestamp		= 3;		// Timestamp associated with data acquisition time
		optional DataType datatype		= 4;		// DataType of the metric/tag value
		optional bool     historical	= 5;		// If this is historical data and should not update real time tag
		optional MetaData metadata		= 6;		// Metadata for the payload

		optional uint32 int_value		= 7;		// Int1, Int2, Int4
		optional uint64 long_value		= 8;		// Int8, DateTime
		optional float  float_value		= 9;		// Float4
		optional double double_value	= 10;		// Float8
		optional bool   boolean_value	= 11;		// Boolean 
		optional string string_value	= 12;		// String, Text
		optional bytes  bytes_value		= 13;		// Bytes, File, Script
		optional DataSet dataset_value	= 14;		// DataSet
		repeated Metric members			= 15;		// For UDTs - a Metric containing member tags
		extensions                      16 to max;	// For third party extensions
	}

	optional uint64 timestamp	= 1;		// Timestamp at message sending time
	repeated Metric metric		= 2;		// Repeated forever - no limit in Google Protobufs
	optional uint64 seq			= 3;		// Sequence number
	optional string uuid		= 4;		// UUID to track message type in terms of schema definitions
	optional bytes  body		= 5;		// To optionally bypass the whole definition above
	extensions					6 to max;	// For third party extensions
}
